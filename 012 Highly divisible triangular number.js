/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

const divisibleTriangleNumber = (n) => {

  // Checker with the number of divisors reaches the given number
  const check = (number) => {
    let arrayOfdivisibles = [];
    let numberOfDivisibles = ''

    // Passes all numbers until it reaches the root of a number, and inserts any number whose number is divided without residue into the arrayOfdivisibles
    for (let i = 1; i < Math.sqrt(number); i++) {
      if (number % i === 0) {
        arrayOfdivisibles.push(i)
      }
    } 
      
    /*
     Moves the sum of the numbers that divide by the formula of:
     The number of numbers that divide the number up to its root, double 2, plus the root in case it is an integer
    */
    if (Number.isInteger(Math.sqrt(number))) {
      numberOfDivisibles = arrayOfdivisibles.length * 2 + 1 
    } else {  
      numberOfDivisibles = arrayOfdivisibles.length * 2
    }
    return numberOfDivisibles > n ? true : false
  }

  // Passes all numbers in sequence of triangle numbers and puts them into a check function
  for (let x = 1; x < x+1; x++) {

    // x*(x+1)/2 this is the formula for getting triangle numbers
    if (check(x*(x+1)/2)) {
      return x*(x+1)/2
    }
  }
}

divisibleTriangleNumber(500);  